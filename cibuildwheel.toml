[tool.cibuildwheel]

# Don't build 32-bit wheels
skip = [
  "*-manylinux_i686",
  "*-musllinux_i686",
  "*-win32",
]

# Apple Silicon support
# When cross-compiling on Intel, it is not possible to test arm64 and
# the arm64 part of a universal2 wheel. Warnings will be silenced with
# following CIBW_TEST_SKIP
macos.archs = ["x86_64", "arm64", "universal2"]
test-skip = "*-macosx_arm64 *_universal2:arm64"

build-verbosity = 1

linux.before-all = [
  "yum install -y llvm-toolset-7.0 || yum -v install -y llvm-toolset-7.0",
]

# lxml doesn't have a wheel for Python 3.10 on the manylinux image we use.
# lxml has historically been slow to support new Pythons as well.
before-test = [
  "grep -v lxml {project}/mypy/test-requirements.txt > /tmp/test-requirements.txt",
  "cp {project}/mypy/mypy-requirements.txt /tmp/mypy-requirements.txt",
  "cp {project}/mypy/build-requirements.txt /tmp/build-requirements.txt",
  "pip install -r /tmp/test-requirements.txt",
]

# lxml currently has wheels on Windows and doesn't have grep, so special case
windows.before-test = [
  "pip install -r {project}/mypy/test-requirements.txt",
]

# pytest looks for configuration files in the parent directories of where the tests live.
# since we are trying to run the tests from their installed location, we copy those into
# the venv. Ew ew ew.
# We don't run external mypyc tests since there's some issue with compilation on the
# manylinux image we use.
test-command = [
  "DIR=$(python -c 'import mypy, os; dn = os.path.dirname; print(dn(dn(mypy.__path__[0])))') cp '{project}/mypy/pytest.ini' '{project}/mypy/conftest.py' $DIR",
  "MYPY_TEST_DIR=$(python -c 'import mypy.test; print(mypy.test.__path__[0])') MYPY_TEST_PREFIX='{project}/mypy' pytest $MYPY_TEST_DIR",
  "MYPYC_TEST_DIR=$(python -c 'import mypyc.test; print(mypyc.test.__path__[0])') MYPY_TEST_PREFIX='{project}/mypy' pytest $MYPYC_TEST_DIR -k 'not test_external'",
]

# i ran into some flaky tests on windows, so only run testcheck. it looks like we
# previously didn't run any tests on windows wheels, so this is a net win.
windows.test-command = """ \
  bash -c "( \
    DIR=$(python -c 'import mypy, os; dn = os.path.dirname; print(dn(dn(mypy.__path__[0])))') \
    && cp '{project}/mypy/pytest.ini' '{project}/mypy/conftest.py' $DIR \
\
    && MYPY_TEST_DIR=$(python -c 'import mypy.test; print(mypy.test.__path__[0])') \
    && MYPY_TEST_PREFIX='{project}/mypy' pytest $MYPY_TEST_DIR/testcheck.py \
  )"
"""


[tool.cibuildwheel.environment]
MYPY_USE_MYPYC = "1"
MYPYC_OPT_LELVEL = "3"

[tool.cibuildwheel.windows.environment]
MYPY_USE_MYPYC = "1"
MYPYC_OPT_LELVEL = "2"

[tool.cibuildwheel.linux.environment]
# Add llvm paths to environment to eliminate scl usage (like manylinux image does for gcc toolset).
MYPY_USE_MYPYC = "1"
MYPYC_OPT_LELVEL = "3"
PATH="$PATH:/opt/rh/llvm-toolset-7.0/root/usr/bin"
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/rh/llvm-toolset-7.0/root/usr/lib64"
CC="clang"


[[tool.cibuildwheel.overrides]]
select = "*musllinux*"
before-all = [
  "apk add --no-cache clang",
]
environment = { MYPY_USE_MYPYC="1", MYPYC_OPT_LELVEL="3" }

